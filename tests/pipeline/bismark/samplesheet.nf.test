nextflow_pipeline {

    name "Test Replicate Handling"
    script "main.nf"

    tag "pipeline"


    test("Should ____") {
        when {
            params {
                input = "$baseDir/tests/pipeline/bismark/assets/samplesheet.csv"
                outdir = "$outputDir"
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                // TODO Output names should be as expected
                { assert snapshot(UTILS.removeNextflowVersion("$outputDir")).match("single_end_software_versions") },
                { assert snapshot(path("$outputDir/bwameth/alignments/samtools_stats/Ecoli.flagstat"),
                            path("$outputDir/bwameth/alignments/samtools_stats/Ecoli.stats"),
                            path("$outputDir/bwameth/alignments/samtools_stats/SRR389222_sub1.flagstat"),
                            path("$outputDir/bwameth/alignments/samtools_stats/SRR389222_sub1.stats"),
                            path("$outputDir/bwameth/alignments/samtools_stats/SRR389222_sub2.flagstat"),
                            path("$outputDir/bwameth/alignments/samtools_stats/SRR389222_sub2.stats"),
                            path("$outputDir/bwameth/alignments/samtools_stats/SRR389222_sub3.flagstat"),
                            path("$outputDir/bwameth/alignments/samtools_stats/SRR389222_sub3.stats"),
                            path("$outputDir/bwameth/deduplicated/Ecoli.markdup.sorted.bam"),
                            path("$outputDir/bwameth/deduplicated/Ecoli.markdup.sorted.bam.bai"),
                            path("$outputDir/bwameth/deduplicated/SRR389222_sub1.markdup.sorted.bam"),
                            path("$outputDir/bwameth/deduplicated/SRR389222_sub1.markdup.sorted.bam.bai"),
                            path("$outputDir/bwameth/deduplicated/SRR389222_sub2.markdup.sorted.bam"),
                            path("$outputDir/bwameth/deduplicated/SRR389222_sub2.markdup.sorted.bam.bai"),
                            path("$outputDir/bwameth/deduplicated/SRR389222_sub3.markdup.sorted.bam"),
                            path("$outputDir/bwameth/deduplicated/SRR389222_sub3.markdup.sorted.bam.bai"),
                            path("$outputDir/bwameth/reference_genome/").list(),
                            path("$outputDir/methyldackel/Ecoli.markdup.sorted_CpG.bedGraph"),
                            path("$outputDir/methyldackel/SRR389222_sub1.markdup.sorted_CpG.bedGraph"),
                            path("$outputDir/methyldackel/SRR389222_sub2.markdup.sorted_CpG.bedGraph"),
                            path("$outputDir/methyldackel/SRR389222_sub3.markdup.sorted_CpG.bedGraph"),
                            path("$outputDir/methyldackel/mbias/Ecoli.mbias.txt"),
                            path("$outputDir/methyldackel/mbias/SRR389222_sub1.mbias.txt"),
                            path("$outputDir/methyldackel/mbias/SRR389222_sub2.mbias.txt"),
                            path("$outputDir/methyldackel/mbias/SRR389222_sub3.mbias.txt"),
                            path("$outputDir/qualimap/Ecoli/genome_results.txt"),
                            path("$outputDir/qualimap/SRR389222_sub1/genome_results.txt"),
                            path("$outputDir/qualimap/SRR389222_sub2/genome_results.txt"),
                            path("$outputDir/qualimap/SRR389222_sub3/genome_results.txt")).match("single_end") },
                { assert new File("$outputDir/fastqc/Ecoli_1_fastqc.html").exists() },
                { assert new File("$outputDir/fastqc/Ecoli_2_fastqc.html").exists() },
                { assert new File("$outputDir/fastqc/SRR389222_sub1_fastqc.html").exists() },
                { assert new File("$outputDir/fastqc/SRR389222_sub2_fastqc.html").exists() },
                { assert new File("$outputDir/fastqc/SRR389222_sub3_fastqc.html").exists() },
                { assert new File("$outputDir/multiqc/bwameth/multiqc_report.html").exists() },
                { assert new File("$outputDir/trimgalore/logs/Ecoli_1.fastq.gz_trimming_report.txt").exists() },
                { assert new File("$outputDir/trimgalore/logs/Ecoli_2.fastq.gz_trimming_report.txt").exists() },
                { assert new File("$outputDir/trimgalore/logs/SRR389222_sub1.fastq.gz_trimming_report.txt").exists() },
                { assert new File("$outputDir/trimgalore/logs/SRR389222_sub2.fastq.gz_trimming_report.txt").exists() },
                { assert new File("$outputDir/trimgalore/logs/SRR389222_sub3.fastq.gz_trimming_report.txt").exists() },
                { assert new File("$outputDir/bwameth/deduplicated/picard_metrics/Ecoli.markdup.sorted.MarkDuplicates.metrics.txt").exists() },
                { assert new File("$outputDir/bwameth/deduplicated/picard_metrics/SRR389222_sub1.markdup.sorted.MarkDuplicates.metrics.txt").exists() },
                { assert new File("$outputDir/bwameth/deduplicated/picard_metrics/SRR389222_sub2.markdup.sorted.MarkDuplicates.metrics.txt").exists() },
                { assert new File("$outputDir/bwameth/deduplicated/picard_metrics/SRR389222_sub3.markdup.sorted.MarkDuplicates.metrics.txt").exists() }
            )
        }
    }

}
