nextflow_workflow {

    name "Test Workflow BWAMETH"
    script "../main.nf"
    workflow "BWAMETH"
    config "../nextflow.config"

    setup {
        run("UNTAR") {
            script "../../../../modules/nf-core/untar/main.nf"
            process {
                """
                input[0] = [
                    [:],
                    file(params.pipelines_testdata_base_path + 'reference/Bwameth_Index.tar.gz', checkIfExists: true)
                ]
                """
            }
        }
    }

    test("Bwameth Single-End") {

        when {
            params {
                aligner              = "bwameth"
                publish_dir_mode     = 'copy'
                outdir               = "results"
                save_reference       = false
                save_align_intermeds = false
                min_depth            = 0
                comprehensive        = false
                ignore_flags         = false
                methyl_kit           = false
                skip_deduplication   = false
            }
            workflow {
                """

                input[0] = Channel.of([
                            [ id:'test', single_end:true ],
                            file(params.pipelines_testdata_base_path + 'testdata/SRR389222_sub1.fastq.gz', checkIfExists: true)
                ])
                input[1] = UNTAR.out.untar.map { it[1] } // bwameth_index
                input[2] = Channel.of(file(params.pipelines_testdata_base_path + 'reference/genome.fa', checkIfExists: true)) // fasta
                input[3] = Channel.of(file(params.pipelines_testdata_base_path + 'reference/genome.fa.fai', checkIfExists: true)) //fasta_index
                input[4] = params.skip_deduplication
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.bam.collect { bam(it[1]).getReadsMD5() },
                    workflow.out.dedup.collect { bam(it[1]).getReadsMD5() },
                    //workflow.out.mqc,
                    workflow.out.versions
                    ).match() }
            )
        }

    }

}
