nextflow_workflow {

    name "Test Workflow BISMARK"
    script "../main.nf"
    workflow "BISMARK"
    config "../nextflow.config"

    setup {
            run("UNTAR") {
                script "../../../../modules/nf-core/untar/main.nf"
                process {
                    """
                    input[0] = [
                        [:],
                        file(params.pipelines_testdata_base_path + 'reference/Bowtie2_Index.tar.gz', checkIfExists: true)
                    ]
                    """
                }
            }
    }

    test("Bismark Single-End") {

        when {
            params {
                aligner              = "bismark"
                publish_dir_mode     = 'copy'
                unmapped             = false
                save_align_intermeds = false
                skip_deduplication   = false
                rrbs                 = false
                nomeseq              = false
                slamseq              = false
                save_reference       = true
                outdir               = "results"
            }
            workflow {
                """
                skip_deduplication = false
                cytosine_report    = false

                input[0] = Channel.of([
                            [ id:'test', single_end:true ],
                            file(params.pipelines_testdata_base_path + 'testdata/SRR389222_sub1.fastq.gz', checkIfExists: true)
                ])
                input[1] = UNTAR.out.untar.map { it[1] }
                input[2] = skip_deduplication
                input[3] = cytosine_report
                """
            }
        }

        then {
            assertAll(
                { assert workflow.success },
                { assert snapshot(
                    workflow.out.bam.collect { bam(it[1]).getReadsMD5() },
                    workflow.out.dedup.collect { bam(it[1]).getReadsMD5() },
                    //workflow.out.mqc,
                    workflow.out.versions
                    ).match() }
            )
        }

    }

}
